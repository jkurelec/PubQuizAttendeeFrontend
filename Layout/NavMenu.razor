@inject UserInfoService UserInfoService
@inject NavigationManager Navigation
@inject IAuthService AuthService

<MudNavMenu>
    <MudText Typo="Typo.h6" Class="pa-4">PubQuiz</MudText>

    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>

    @if (IsAuthenticated)
    {
        <MudNavLink Href="search-users" Icon="@Icons.Material.Filled.PersonSearch">Users</MudNavLink>
        <MudNavLink Href="profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
        <MudNavLink Href="my-teams" Icon="@Icons.Material.Filled.People">Teams</MudNavLink>
        <MudButton StartIcon="@Icons.Material.Filled.Logout"
                    Color="Color.Inherit"
                    Variant="Variant.Text"
                    OnClick="@Logout"
                    Class="mud-nav-link px-4">
            Logout
        </MudButton>
    }
    else
    {
        <MudNavLink Href="login" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
    }
</MudNavMenu>

@code {
    private bool IsAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserInfoService.GetUserInfo();
        IsAuthenticated = user != null;

        UserInfoService.UserInfoChanged += OnUserInfoChanged;
    }

    private void OnUserInfoChanged(UserInfo? userInfo)
    {
        IsAuthenticated = userInfo != null;
        InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("login", true);
    }

    public void Dispose()
    {
        UserInfoService.UserInfoChanged -= OnUserInfoChanged;
    }
}
