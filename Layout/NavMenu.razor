@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IAuthService AuthService

<MudDrawer Open="true" Variant="DrawerVariant.Responsive">
    <MudNavMenu>
        <MudText Typo="Typo.h6" Class="pa-4">PubQuiz</MudText>

        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <MudNavLink Href="counter" Icon="@Icons.Material.Filled.AddBox">Counter</MudNavLink>
        <MudNavLink Href="weather" Icon="@Icons.Material.Filled.Cloud">Weather</MudNavLink>

        @if (IsAuthenticated)
        {
            <MudNavLink Href="profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
            <MudNavLink Href="" Icon="@Icons.Material.Filled.Logout" OnClick="@Logout">Logout</MudNavLink>
        }
        else
        {
            <MudNavLink Href="login" Icon="@Icons.Material.Filled.Login">Login</MudNavLink>
        }
    </MudNavMenu>
</MudDrawer>

@code {
    private bool IsAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("login", true);
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
